data = stan_data,
chains = 4,
warmup = 3000,
iter = 30000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Traceplot.png",
width = 12, height = 12, units = "in")
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Posterior.png",
width = 12, height = 12, units = "in")
results <- as.data.frame((summary(model))[["summary"]])
model <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
warmup = 3000,
iter = 30000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Traceplot.png",
width = 12, height = 12, units = "in")
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Posterior.png",
width = 12, height = 12, units = "in")
results <- as.data.frame((summary(model))[["summary"]])
saveRDS(lnorm_coeffs, file = "lnorm_coeffs.Rds")
readRDS("lnorm_coeffs.Rds")
lnorm_coeffs <- readRDS("lnorm_coeffs.Rds")
fit_model <- function(N) {
out <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = N,
cores = 5,
refresh = 0)
out
}
test <- fit_model(1000)
stan_data <- list(
N = 6,
mean_gem = (lnorm_coeffs |> filter(term == "mean", Treatment == "GEM"))[["Estimate"]],
mean_comp = (lnorm_coeffs |> filter(term == "mean", Treatment != "GEM"))[["Estimate"]],
sd_gem = (lnorm_coeffs |> filter(term == "sd", Treatment == "GEM"))[["Estimate"]],
sd_comp = (lnorm_coeffs |> filter(term == "sd", Treatment != "GEM"))[["Estimate"]]
)
test <- fit_model(1000)
test$tau
test[["tau"]]
test
test$lp__[[1]]
test
summary(test)
summary(test)[["lp"]]
summary(test)[["lp__"]]
(summary(test))[["lp__"]]
summary(test)
res <- summary(test)
res$summary$lp__
res$summary[["lp__"]]
res$summary
res$summary[1]
res$summary[[1]]
res$summary[[6]]
View(stan_data)
View(res)
res[["summary"]]
res[["summary"]]
res[["summary"]]$lp__
res[["summary"]][["lp__"]]
res <- summary(test)
res
class(test)
tau_summary <- summary(fit, pars = c("tau"), probs = c(0.1, 0.9))$summary
tau_summary <- summary(test, pars = c("tau"), probs = c(0.1, 0.9))$summary
tau_summary
tau_summary$mean
tau_summary[["mean"]]
c(tau_summary)
c(tau_summary)[1]
df <- data.frame(N = seq(1000,50000,500))
View(df)
df <- data.frame(N = seq(500,50000,500))
df <- data.frame(N = seq(500,50000,500), mean_tay = rep(0, 100))
View(lnorm_coeffs)
View(lnorm_coeffs)
View(df)
gc()
lnorm_coeffs <- readRDS("lnorm_coeffs.Rds")
stan_data <- list(
N = 6,
mean_gem = (lnorm_coeffs |> filter(term == "mean", Treatment == "GEM"))[["Estimate"]],
mean_comp = (lnorm_coeffs |> filter(term == "mean", Treatment != "GEM"))[["Estimate"]],
sd_gem = (lnorm_coeffs |> filter(term == "sd", Treatment == "GEM"))[["Estimate"]],
sd_comp = (lnorm_coeffs |> filter(term == "sd", Treatment != "GEM"))[["Estimate"]]
)
fit_model <- function(N) {
out <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = N,
cores = 5,
refresh = 0)
out
}
df <- data.frame(N = seq(500,50000,500), mean_tau = rep(0, 100))
for (i in 1:100) {
fit <- fit_model(df$N[i])
mu_tau <- c(summary(fit, pars = c("tau"), probs = c(0.1, 0.9))$summary)[1]
df$mean_tau[i] <- mu_tau
}
View(df)
ggplot(df) +
geom_density(x = mean_tau)
ggplot(df) +
geom_density(aes(x = mean_tau))
ggplot(df) +
geom_line(aes(x = N, y = mean_tau))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Mean_Tau_Trace.png",
width = 12, height = 10, units = "in")
gc()
lnorm_coeffs <- readRDS("lnorm_coeffs.Rds")
stan_data <- list(
N = 6,
mean_gem = (lnorm_coeffs |> filter(term == "mean", Treatment == "GEM"))[["Estimate"]],
mean_comp = (lnorm_coeffs |> filter(term == "mean", Treatment != "GEM"))[["Estimate"]],
sd_gem = (lnorm_coeffs |> filter(term == "sd", Treatment == "GEM"))[["Estimate"]],
sd_comp = (lnorm_coeffs |> filter(term == "sd", Treatment != "GEM"))[["Estimate"]]
)
model <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = 50000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Traceplot.png",
width = 12, height = 12, units = "in")
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Posterior.png",
width = 12, height = 12, units = "in")
results <- as.data.frame((summary(model))[["summary"]])
results$mean
lnorm_coeffs |> filter(term == "mean", Treatment != "GEM")
results
plot(model, pars = c("re[1]","re[2]","re[3]",
"re[4]","re[5]","re[6]"))
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
results$mean[1:6]
results_df <- data.frame(
Treament = c("FOL", "GEMAXI", "PEFG",
"GEMIRI", "GEMCIS", "GEMCAP"),
TrtDiff = results$mean[1:6]
)
results_df <- data.frame(
Treament = c("FOL", "GEMAXI", "PEFG",
"GEMIRI", "GEMCIS", "GEMCAP"),
TrtDiff = results$mean[1:6]
TrtDiffLCL = results$`2.5%`[1:6]
TrtDiffUCL = results$`97.5%`[1:6]
)
results_df <- data.frame(
Treament = c("FOL", "GEMAXI", "PEFG",
"GEMIRI", "GEMCIS", "GEMCAP"),
TrtDiff = results$mean[1:6],
TrtDiffLCL = results$`2.5%`[1:6],
TrtDiffUCL = results$`97.5%`[1:6]
)
ggplot(results_df) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3)
ggplot(results_df, aes(y = fct_rev(TrtDiff))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3)
ggplot(results_df, aes(y = as.factor(TrtDiff))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3)
results_df <- data.frame(
Treatment = c("FOL", "GEMAXI", "PEFG",
"GEMIRI", "GEMCIS", "GEMCAP"),
TrtDiff = results$mean[1:6],
TrtDiffLCL = results$`2.5%`[1:6],
TrtDiffUCL = results$`97.5%`[1:6]
)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL))
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
results_df <- data.frame(
Treatment = c("d[FOL]", "d[GEMAXI]", "d[PEFG]",
"d[GEMIRI]", "d[GEMCIS]", "d[GEMCAP]"),
TrtDiff = results$mean[1:6],
TrtDiffLCL = results$`2.5%`[1:6],
TrtDiffUCL = results$`97.5%`[1:6]
)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL))
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(x = 0)) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0)) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
?geom_vline
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0), linetype = "dashed", linewidth = 0.5) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0), linetype = "dashed", alpha = 0.5) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Forest.png",
width = 12, heigh = 12, units = "in")
model <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = 50000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Traceplot.png",
width = 12, height = 12, units = "in")
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Posterior.png",
width = 12, height = 12, units = "in")
results <- as.data.frame((summary(model))[["summary"]])
results_df <- data.frame(
Treatment = c("d[FOL]", "d[GEMAXI]", "d[PEFG]",
"d[GEMIRI]", "d[GEMCIS]", "d[GEMCAP]"),
TrtDiff = results$mean[1:6],
TrtDiffLCL = results$`2.5%`[1:6],
TrtDiffUCL = results$`97.5%`[1:6]
)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0), linetype = "dashed", alpha = 0.5) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Forest.png",
width = 12, heigh = 12, units = "in")
ls
View(results_df)
print(model)
library(openxlsx)
library(dplyr)
library(devtools)
library(PCNMA)
library(multinma)
library(forestploter)
library(ggplot2)
library(rstan)
lnorm_coeffs <- readRDS("lnorm_coeffs.Rds")
stan_data <- list(
N = 6,
mean_gem = (lnorm_coeffs |> filter(term == "mean", Treatment == "GEM"))[["Estimate"]],
mean_comp = (lnorm_coeffs |> filter(term == "mean", Treatment != "GEM"))[["Estimate"]],
sd_gem = (lnorm_coeffs |> filter(term == "sd", Treatment == "GEM"))[["Estimate"]],
sd_comp = (lnorm_coeffs |> filter(term == "sd", Treatment != "GEM"))[["Estimate"]]
)
model <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = 15000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
plot(model$tau)
model$tau
model[["tau"]]
library(shinystan)
install.packages("shinystan")
renv::install("shinystan")
renv::install("gtools")
model <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = 15000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
gc()
model <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = 50000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Traceplot.png",
width = 12, height = 12, units = "in")
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Posterior.png",
width = 12, height = 12, units = "in")
results <- as.data.frame((summary(model))[["summary"]])
results_df <- data.frame(
Treatment = c("d[FOL]", "d[GEMAXI]", "d[PEFG]",
"d[GEMIRI]", "d[GEMCIS]", "d[GEMCAP]"),
TrtDiff = results$mean[1:6],
TrtDiffLCL = results$`2.5%`[1:6],
TrtDiffUCL = results$`97.5%`[1:6]
)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0), linetype = "dashed", alpha = 0.5) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Forest.png",
width = 12, heigh = 12, units = "in")
View(lnorm_coeffs)
# Load PFS Data
PFS_IPD <- read.xlsx("Data/IPD/IPD_PFS_Master.xlsx") |>
mutate(status = ifelse(censored == TRUE, 0, 1)) |>
rename(Study = study)
View(PFS_IPD)
library(multinma)
?set_ipd
test <- set_ipd(
data = PFS_IPD,
study = Study,
trt = treatment,
E = time,
trt_ref = "GEM"
)
test <- set_ipd(
data = PFS_IPD,
study = Study,
trt = treatment,
E = time,
r = censored,
trt_ref = "GEM"
)
test <- set_ipd(
data = PFS_IPD,
study = Study,
trt = treatment,
y = time,
trt_ref = "GEM"
)
plot(test)
?set_agd_surv
test2 <- set_agd_surv(
data = PFS_IPD,
study = Study,
trt = treatment,
Surv = time,
trt_ref = "GEM"
)
test2 <- set_agd_surv(
data = PFS_IPD,
study = Study,
trt = treatment,
Surv = Surv(time, censored),
trt_ref = "GEM"
)
plot(test2)
class(test2)
?nma
nma(test2,
trt_effects = "random")
nma(test2,
trt_effects = "random",
likelihood = "lognormal",
link = "log"
)
test <- set_agd_surv(
data = PFS_IPD,
study = Study,
trt = treatment,
Surv = Surv(time, censored),
trt_ref = "GEM"
)
nma(test,
trt_effects = "random",
likelihood = "lognormal",
link = "log"
)
model <- nma(test,
trt_effects = "random",
likelihood = "lognormal",
link = "log"
)
rlang::last_trace()
test
test <- set_agd_surv(
data = PFS_IPD,
study = Study,
trt = treatment,
Surv = Surv(time, censored),
trt_ref = "GEM"
)
test
View(test)
test[["agd_arm"]]
set_agd_surv()
?set_agd_surv
test$agd_arm
View(test)
View(test[["agd_arm"]])
View((test[["agd_arm"]])[[4]][[1]])
View((test[["agd_arm"]])[[5]][[1]])
model <- nma(test,
trt_effects = "random",
likelihood = "lognormal",
link = "log"
)
model <- nma(test,
likelihood = "lognormal",
link = "log"
)
devtools::load_all()
net <- gen_network(PFS_IPD, ref = "GEM")
devtools::load_all()
net <- gen_network(PFS_IPD, ref = "GEM")
library(PCNMA)
# Load PFS Data
PFS_IPD <- read.xlsx("Data/IPD/IPD_PFS_Master.xlsx") |>
mutate(status = ifelse(censored == TRUE, 0, 1)) |>
rename(Study = study)
net <- gen_network(PFS_IPD, ref = "GEM")
fit_model <- function(network, L, lnk){
out <- multinma::nma(
test,
likelihood = L,
link = lnk
)
}
model <- fit_model(net, "lognormal", "log")
plot(model)
summary(model)
class(model)
View(model)
library(multinma)
plot(model)
summary(model)
results <- model$stanfit
library(stan)
library(rstan)
plot(results)
model[["stanfit"]]
traceplot(results, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
traceplot(results, pars = c("delta[FOL]","delta[GEMXI]","delta[GAMCAP]",
"delta[GEMCIS]"))
traceplot(results, pars = c("d[FOL]","d[GEMXI]","d[GAMCAP]","d[GEMCIS]"))
