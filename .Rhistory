read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
?group_by
devtools::load_all()
fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
plot(A)
plot(A)
devtools::load_all()
plot(A)
plot(A, km = TRUE)
summary(A)
B <- summary(A)
B
B <- summary(A, AIC = TRUE)
B
View(A)
coef(A)
coef(A$Model)
coef(A$Model[[1]])
coef(A$Model[1])
coef(A$Model[[2]])
devtools::load_all()
coef(A)
coef(A)
fit
A
class(A)
coef(A)
devtools::load_all()
handle_IPD()
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
plot(A, km = TRUE)
coef(A)
A |>
dplyr::select(Distribution, Model)
B <- A |>
dplyr::select(Distribution, Model)
View(IPD_GemOS_Colluci)
View(B)
tibble(B)
library(tibble)
tibble(B)
df <- A |> select(Distribution)
df <- A |> dplyr::select(Distribution)
View(df)
df <- A |> dplyr::select(Distribution) |>
purrr::map(A$Model, coef)
coef(A$Model)
coef(A$Model[[1]])
coef(A$Model[1])
coef(A$Model[[2]])
A <- purrr::map(A$Model, coef)
View(A)
data.frame(A)
#' Coefficients of fitted models
coef.fitted_distribution <- function(fit){
coefList <- purrr::map(fit$Model, coef)
coefList
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
coef(A)
B <- coef(A)
View(B)
as.data.frame(B)
as.data.frame(B, row.names = "Model", "Coefficient", "Value")
as.data.frame(B, row.names = c("Model", "Coefficient", "Value"))
rbind.data.frame(B)
?rbind.data.frame
rbind(B)
cbind(B)
?cbind
library(dplyr)
bind_rows(B)
?bind_rows
do.call(rbind.data.frame, B)
do.call(rbind.data.frame, B)
do.call(cbind.data.frame, B)
C <- do.call(rbind.data.frame, B)
View(C)
matrix(B)
matrix(B, ncols = 3)
?matrix
matrix(B, ncol = 3)
matrix(B, ncol = 3, nrow = 15)
matrix(B, ncol = 3, nrow = 14)
library(tidyr)
pivot_longer(B)
as.data.frame(B)
lapply(B, unlist)
C <- unlist(B)
C
pivot_longer(C)
C <- lapply(B, unlist)
View(C)
C$Exponential
C$Weibull
V
B
B |> as_tibble()
?as_tibble
as_tibble(B)
B
lapply(as.data.frame, B)
lapply(B, as.data.frame)
C <- lapply(B, as.data.frame)
View(C)
bind_rows(C)
D <- bind_rows(C)
View(D)
View(C)
pivot_longer(C)
D <- do.call(pivot_longer, C)
tibble(C)
D <- tibble(C)
View(D)
View(D[[1]][[1]])
View(D[[1]][[2]])
pivot_longer(C)
pivot_londer(D)
pivot_longer(D)
pivot_longer(D, cols = C)
E <- pivot_longer(D)
E <- pivot_longer(D, cols = C)
View(E)
E <- pivot_longer(D, cols = A$Distribution)
C <- as_tibble(C)
df <- bind_cols(C)
library(purrr)
?walk
purrr::walk(A$Model, coef)
C <- purrr::walk(A$Model, coef)
View(C)
C[["Exponential"]]
View(C)
C[["Exponential"]][["coefficients"]]
View(A)
View(A[[3]][[1]])
C <- purrr::walk(A$Model, .get_attribute, "coefficients")
View(C)
C <- purrr::map(A$Model, .get_attribute, "coefficients")
View(C)
?mutate
C <- purrr::map(A$Model, .get_attribute, "coefficients")
View(C)
names(B)
B[1]
B[2]
B[2][1]
B[2][[1]]
B[[1]]
B[[2]]
B[[2]][1]
B[[2]][1][1]
B[[2]][1][2]
B[[2]][1]
unnest(B)
unnest(B, cols = c("Model"))
?nest
A <- A |>
purrr::map(A$Model, .get_attribute, "coefficients")
A <- A |>
purrr::map(Model, .get_attribute, "coefficients")
A <- A |>
purrr::map(.data$Model, .get_attribute, "coefficients")
A <- A |>
purrr::map(.x$Model, .get_attribute, "coefficients")
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
A <- A |>
nest(purrr::map(, .get_attribute, "coefficients"))
A <- A |>
nest(purrr::map(Model, .get_attribute, "coefficients"))
A <- A |>
nest(Coefs = purrr::map(Model, .get_attribute, "coefficients"))
A <- A |>
nest(Coefs = purrr::map(A$Model, .get_attribute, "coefficients"))
B <- coef(A)
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
plot(A, km = TRUE)
B <- coef(A)
A$Coefs <- nest(B)
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
A <- A |>
mutate(Coefs = purrr::map(Model, .get_attribute, "coefficients"))
View(B)
View(A)
as.data.frame(A$Coefs)
pivot_longer(A$Coefs)
tibble(A)
stack(A$Coefs)
B
stack(B)
?stack
stack(B, "Model")
C <- data.frame(stack(B))
C
names(C) <- c("Value", "Distribution")
C
B
C
C$Value
B
nice_parametric_paramlist <- c(
"rate",
"shape",
"rate",
"mu",
"sigma",
"Q",
"shape",
"rate",
"shape",
"scale",
"meanlog",
"sdlog",
"shape",
"scale")
C
nice_parametric_paramlist <- c(
"rate",
"shape",
"rate",
"mu",
"sigma",
"Q",
"shape",
"rate",
"shape",
"scale",
"meanlog",
"sdlog",
"shape",
"scale")
C$term <- nice_parametric_paramlist
C
devtools::load_all()
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
plot(A, km = TRUE)
B <- coef(A)
A
View(A[[3]][[1]])
devtools::load_all()
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
B <- coef(A)
devtools::load_all()
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
B <- coef(A)
A
fit <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
coefList <- purrr::map(fit$Model, .get_attribute, "coefficients")
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
fit <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
A<- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
class(A)
devtools::load_all()
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
B <- coef(A)
coef.fitted_distribution(A)
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
devtools::load_all()
B <- coef(A)
# Load all IPD data
handle_IPD <- function(){
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
}
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
B <- coef(A)
library(sloop)
sloop::s3_dispatch(coef(A))
B <- coef(A)
B <- coef.fitted_distribution(A)
View(B)
gc()
devtools::load_all()
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
s3_dispatch(coef(A))
B <- coef.fitted_distribution(A)
B <- coef(A)
s3_dispatch(plot(A))
B <- coef(A)
ftype(coef)
devtools::load_all()
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
plot(A, km = TRUE)
B <- coef(A)
inherits(A, "fitted_distributions")
inherits(A, "fitted_distribution")
library(flexsurvreg)
library(flexsurv)
s3_dispatch(coef(A))
devtools::load_all()
?coef.flexsurvreg
A$Model[1]
View(A)
View(A[[3]][[1]])
.get_attribute(A$Model[[2]], "coefficients")
B <- coef(A)
devtools::load_all()
B <- coef(A)
methods(A)
B <- coef.fitted_distribution(A)
B <- coef.fitted_distribution(A)
devtools::load_all()
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
# Load all IPD data
handle_IPD <- function(){
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
plot(A, km = TRUE)
B <- coef(A)
B <- coef.fitted_distribution(A)
View(B)
?UseMethod
coef <- function(fit, ...) UseMethod("coef")
B <- coef(A)
#' Coefficients of fitted models
#'
#' @param fit A [PCNMA::fitted_distribution] object
#' @param ... for S3 consistency
#'
coef.fitted_distribution <- function(fit, ...){
coefList <- purrr::map(fit$Model, .get_attribute, "coefficients")
df <- stack(coefList)
names(df) <- c("Value", "Distribution")
df <- df |>
dplyr::mutate(term = nice_parametric_paramlist) |>
dplyr::select(Distribution, term, Value)
df
}
B <- coef(A)
B
devtools::load_all()
devtools::load_all()
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
plot(A, km = TRUE)
B <- coef(A)
coef <- function(fit, ...) UseMethod("coef.fitted_distribution")
B <- coef(A)
coef <- function(fit, ...) UseMethod("coef.fitted_distribution")
B <- coef(A)
coef <- function(fit, ...) UseMethod("coef")
B <- coef(A)
#' Coefficients of fitted models
#'
#' @param fit A [PCNMA::fitted_distribution] object
#' @param ... for S3 consistency
#'
#' @export
#'
coef.fitted_distribution <- function(fit, ...){
coefList <- purrr::map(fit$Model, .get_attribute, "coefficients")
df <- stack(coefList)
names(df) <- c("Value", "Distribution")
df <- df |>
dplyr::mutate(term = nice_parametric_paramlist) |>
dplyr::select(Distribution, term, Value)
df
}
B <- coef(A)
devtools::load_all()
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
}
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
B <- coef(A)
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
B <- coef(A)
B <- coef.fitted_distribution(A)
B <- coef(A)
devtools::load_all()
methods("fitted_distribution")
methods("fit_distribution")
methods("coef")
devtools::load_all()
devtools::load_all()
coef <- UseMethod("coef", coef)
devtools::load_all()
B <- coef(A)
devtools::load_all()
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
plot(A, km = TRUE)
B <- coef.fitted_distribution(A)
B <- coef(A)
