View(C)
D <- as.data.frame(C)
View(D)
testplot <- function(model){
df <- as.data.frame(summary(model))
}
testplot(B$Model[[2]])
D <- testplot(B$Model[[2]])
devtools::load_all()
B <- fit_distribution(dists, testIPD)
devtools::load_all()
B <- fit_distribution(dists, testIPD)
View(B)
View(plot.fitted_distribution)
devtools::load_all()
B <- fit_distribution(dists, testIPD)
View(B)
View(B[[3]][[1]])
R.version
B[["Model_Data"]]
B[["Model_Data"]][2]
B[["Model_Data"]][1]
B[["Model_Data"]][2]
testplot <- function(model){
p <- ggplot(model[["Model_Data"]]) +
geom_line(aes(x = time, y = est))
}
B[2]
B[[2]]
testplot <- function(model_data){
p <- ggplot(model_data) +
geom_line(aes(x = time, y = est))
}
testplot(B$Model_Data[2])
class(B$Model_Data)
class(B$Model_Data[2])
as.data.frame(class(B$Model_Data[2]))
as.data.frame(B$Model_Data[2])
testplot <- function(model_data){
df <- as.data.frame(model_data)
p <- ggplot(df) +
geom_line(aes(x = time, y = est))
p
}
testplot(B$Model_Data[2])
as.data.frame(B$Model_Data[2])
as.data.frame(B$Model_Data[2])[2]
p <- ggplot() +
geom_line(aes(x = model_data[1], y = model_data[2]))
p
testplot(B$Model_Data[2])
testplot <- function(model_data){
df <- as.data.frame(model_data)
p <- ggplot() +
geom_line(aes(x = model_data[1], y = model_data[2]))
p
}
testplot(B$Model_Data[2])
as.data.frame(B$Model_Data[2])[2]
as.data.frame(B$Model_Data[2])
names(df)
names(as.data.frame(B$Model_Data[2]))
testplot <- function(model_data){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
p <- ggplot() +
geom_line(aes(x = time, y = survival))
p
}
testplot <- function(model_data){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
p <- ggplot(df) +
geom_line(aes(x = time, y = survival))
p
}
testplot(B$Model_Data[2])
plot(B$Model[2])
plot(B$Model[[2]])
testplot <- function(model_data){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
p <- ggplot(df) +
geom_line(aes(x = time, y = survival)) +
ylim_c(0,1)
p
}
testplot(B$Model_Data[2])
testplot <- function(model_data){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
p <- ggplot(df) +
geom_line(aes(x = time, y = survival)) +
ylim(c(0,1))
p
}
testplot(B$Model_Data[2])
class(testplot(B$Model_Data[2]))
#' Plot a single fitted distribution
#'
#'
#'
.plot_fitted_distribution <- function(model_data, CI = FALSE, km = FALSE, ...){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
p <- ggplot(df) +
geom_line(aes(x = time, y = survival)) +
ylim(c(0,1))
}
.plot_fitted_distribution(B$Model_Data[2])
#' Plot a single fitted distribution
#'
#'
#'
.plot_fitted_distribution <- function(model_data, CI = FALSE, km = FALSE, ...){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
p <- ggplot(df) +
geom_line(aes(x = time, y = survival)) +
ylim(c(0,1))
p
}
.plot_fitted_distribution(B$Model_Data[2])
.plot_fitted_distribution(B$Model_Data[1])
#' Plot a single fitted distribution
#'
#'
#'
.plot_fitted_distribution <- function(model_data, CI = FALSE, km = FALSE, ...){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
# Base plot, just the model
p <- ggplot(df) +
geom_line(aes(x = time, y = survival)) +
ylim(c(0,1))
if (CI) {
p <- p +
geom_ribbon(aes(ymin = survival.lcl, ymax = survival.ucl))
}
}
#' Plot a single fitted distribution
#'
#'
#'
.plot_fitted_distribution <- function(model_data, CI = FALSE, km = FALSE, ...){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
# Base plot, just the model
p <- ggplot(df) +
geom_line(aes(x = time, y = survival)) +
ylim(c(0,1))
if (CI) {
p <- p +
geom_ribbon(aes(ymin = survival.lcl, ymax = survival.ucl))
}
p
}
.plot_fitted_distribution(B$Model_Data[1], CI = TRUE)
#' Plot a single fitted distribution
#'
#'
#'
.plot_fitted_distribution <- function(model_data, CI = FALSE, km = FALSE, ...){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
# Base plot, just the model
p <- ggplot(df) +
geom_line(aes(x = time, y = survival)) +
ylim(c(0,1))
if (CI) {
p <- p +
geom_ribbon(aes(x = time, ymin = survival.lcl, ymax = survival.ucl))
}
p
}
.plot_fitted_distribution(B$Model_Data[1], CI = TRUE)
#' Plot a single fitted distribution
#'
#'
#'
.plot_fitted_distribution <- function(model_data, CI = FALSE, km = FALSE, ...){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
# Base plot, just the model
p <- ggplot(df) +
geom_line(aes(x = time, y = survival)) +
ylim(c(0,1))
if (CI) {
p <- p +
geom_ribbon(aes(x = time, ymin = survival.lcl, ymax = survival.ucl),
fill = "grey70")
}
p
}
.plot_fitted_distribution(B$Model_Data[1], CI = TRUE)
ggplot()
#' Plot a single fitted distribution
#'
#'
#'
.plot_fitted_distribution <- function(model_data, CI = FALSE, km = FALSE, ...){
df <- as.data.frame(model_data)
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
# Base plot, just the model
p <- ggplot(df, aes(x = time, y = survival))
if (CI) {
p <- p +
geom_ribbon(aes(x = time, ymin = survival.lcl, ymax = survival.ucl),
fill = "grey70")
}
# Add the model line
p <- p + geom_line()
p
}
.plot_fitted_distribution(B$Model_Data[1], CI = TRUE)
B[["Model_Data"]]
#' Fit distributions to a dataset
#'
#' @param distributions A list of distributions
#' @param data An IPD dataset
#'
#' @returns A dataframe with fitted values
#'
#' @export
fit_distribution <- function(distributions, data){
df <- data.frame(Distribution = names(distributions))
df <- df |>
dplyr::mutate(Model = purrr::map(
distributions[Distribution],
.fit_distribution,
data
)) |>
dplyr::mutate(Model_Data = purrr::map(
Model,
summary
))
class(df) <- c("fitted_distribution", class(df))
df
}
B <- fit_distribution(dists, testIPD)
B |>
filter(Distribution == "Weibull")
C <- B |>
filter(Distribution == "Weibull")
class(C)
C <- B |>
filter(Distribution == "Weibull")
C <- B |>
filter(Distribution == "Gamma")
C
C <- B |>
filter(Distribution == "Gamma") |>
plot()
C
devtools::load_all()
rm(list = c("fit_distribution"))
devtools::load_all()
C <- B |>
filter(Distribution == "Gamma") |>
plot()
C
View(p)
#' Plot a set of fitted distributions
#'
#' @param fit A [PCNMA::fitted_distribtuion] object
#' @param CI Include a confidence interval?
#' @param km Add the original KM curve?
#' @param km a dataframe with a surv column
#' @param ... For S3 consistency
#'
#' @export
plot.fitted_distribution <-  function(fit, CI = FALSE, km = FALSE, ...){
df <- as.data.frame(fit[["Model_Data"]])
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
# Base plot, just the model
p <- ggplot(df, aes(x = time, y = survival))
if (CI) {
p <- p +
geom_ribbon(aes(x = time, ymin = survival.lcl, ymax = survival.ucl),
fill = "grey70")
}
# Add the model line
p <- p + geom_line()
p
}
B
View(B)
B <- fit_distribution(dists, testIPD)
C <- B |>
filter(Distribution == "Gamma")
View(C)
View(C)
plot(C)
plot(C, CI = TRUE)
C <- B |>
filter(Distribution == "Gamma") |>
plot()
C
C <- B |>
filter(Distribution == "Gamma", CI = TRUE) |>
plot()
C
C <- B |>
filter(Distribution == "Gamma") |>
plot(CI = TRUE)
C
devtools::load_all()
B |>
filter(Distribution == "Gamma") |>
plot(CI = TRUE)
dists <- list(
"Weibull" = "weibull",
"Gamma" = "gamma"
)
plot(.fit_distribution("weibull", testIPD))
testIPD <- read.csv("Data/IPD/IPD_GemOS_Colluci.csv")
testIPD
B <- fit_distribution(dists, testIPD)
B |>
filter(Distribution == "Gamma") |>
plot(CI = TRUE)
B |>
plot(CI = TRUE)
#' Plot a set of fitted distributions
#'
#' @param fit A [PCNMA::fitted_distribtuion] object
#' @param CI Include a confidence interval?
#' @param km Add the original KM curve?
#' @param km a dataframe with a surv column
#' @param ... For S3 consistency
#'
#' @export
plot.fitted_distribution <-  function(fit, CI = FALSE, km = FALSE, ...){
df <- as.data.frame(fit[["Model_Data"]])
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
# Base plot, just the model
p <- ggplot(df, aes(x = time, y = survival))
if (CI) {
p <- p +
geom_ribbon(aes(x = time, ymin = survival.lcl, ymax = survival.ucl),
fill = "grey70")
}
# Add the model line and final cosmetic changes
p <- p +
geom_line(aes(colour = Distribution)) +
labs(x = "Time",
y = "Survival")
p
}
B |>
plot(CI = TRUE)
B <- fit_distribution(dists, testIPD)
B |>
plot(CI = TRUE)
B |>
plot(CI = TRUE)
#' Plot a set of fitted distributions
#'
#' @param fit A [PCNMA::fitted_distribtuion] object
#' @param CI Include a confidence interval?
#' @param km Add the original KM curve?
#' @param km a dataframe with a surv column
#' @param ... For S3 consistency
#'
#' @export
plot.fitted_distribution <-  function(fit, CI = FALSE, km = FALSE, ...){
df <- as.data.frame(fit[["Model_Data"]])
names(df) <- c("time", "survival", "survival.lcl", "survival.ucl")
# Base plot, just the model
p <- ggplot(df, aes(x = time, y = survival))
if (CI) {
p <- p +
geom_ribbon(aes(x = time, ymin = survival.lcl, ymax = survival.ucl),
fill = "grey70")
}
# Add the model line and final cosmetic changes
p <- p +
geom_line() +
labs(x = "Time",
y = "Survival")
p
}
B |>
plot(CI = TRUE)
B |>
map(Plot = purrr::map(
Model_Data,
plot
))
B |>
mutate(Plot = purrr::map(
Model_Data,
plot
))
B |>
mutate(Plot = purrr::map(
Model_Data,
plot,
CI = TRUE
))
B |>
mutate(Plot = purrr::map(
Model_Data,
plot.fitted_distribution,
CI = TRUE
))
B <- fit_distribution(dists, testIPD)
B
B |>
mutate(Plot = purrr::map(
Model_Data,
plot.fitted_distribution,
CI = TRUE
))
renv::status
renv::status()
renv::install("ggraph")
renv::install("openxlsx")
renv::status()
??graphh
devtools::load_all()
ntwrk <- gen_network_data(openxlsx::read.xlsx("Data/DE.xlsx", "GEM"))
devtools::load_all()
ntwrk <- gen_network_data(openxlsx::read.xlsx("Data/DE.xlsx", "GEM"))
devtools::load_all()
ntwrk <- gen_network_data(openxlsx::read.xlsx("Data/DE.xlsx", "GEM"))
devtools::load_all()
ntwrk <- gen_network_data(openxlsx::read.xlsx("Data/DE.xlsx", "GEM"))
ntwrk <- gen_network_data(openxlsx::read.xlsx("Data/DE.xlsx"), "GEM"))
ntwrk <- gen_network_data(openxlsx::read.xlsx("Data/DE.xlsx"), "GEM")
library(readxl)
DE <- read_excel("Data/DE.xlsx", skip = 1)
View(DE)
ntwrk <- gen_network_data(DE, "GEM")
View(DE)
names(DE)
devtools::load_all()
ntwrk <- gen_network_data(DE, "GEM")
devtools::load_all()
ntwrk <- gen_network_data(DE, "GEM")
netwrk
netwrk
netwrk
ntwrk
class(ntwrk)
ntwrk <- gen_network_data(DE, "GEM")
ntwrk_data <- gen_network_data(DE, "GEM")
ntwrk <- gen_network(ntwrk_data)
ntwrk <- gen_network(ntwrk_data, "GEM")
#' Generate network data
#'
#' @param data A date extraction dataset
#' @param ref A character reference treatment
#'
#' @returns A dataframe
#'
#' @export
gen_network_data <- function(data, ref){
data |>  dplyr::select(Study, Year, "Total Patients", "Treatment 1",
"Treatment 2", "N (Trt1)", "N (Trt2)", "Reported OS", "Reported PFS") |>
dplyr::rename(N = "Total Patients") |>
dplyr::mutate(Study = paste0(Study, ", ", Year)) |>
tidyr::pivot_longer(cols = 4:5, values_to = "Treatment") |>
dplyr::mutate(r = ifelse(Treatment == ref, `N (Trt1)`, `N (Trt2)`)) |>
dplyr::select(-c(name, "N (Trt1)", "N (Trt2)"))
}
ntwrk_data <- gen_network_data(DE, "GEM")
ntwrk <- gen_network(ntwrk_data, "GEM")
ntwrk
class(ntwrk)
plot(ntwrk)
print(ntwrk)
?devtools::install_github
?github_token
devtools::load_all()
handle_IPD()
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) |>
dplyr::mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
?group_by
devtools::load_all()
fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
A <- fit_distribution(nice_parametric_dists, IPD_GemOS_Colluci)
plot(A)
plot(A)
devtools::load_all()
plot(A)
plot(A, km = TRUE)
summary(A)
B <- summary(A)
B
B <- summary(A, AIC = TRUE)
B
View(A)
coef(A)
coef(A$Model)
coef(A$Model[[1]])
coef(A$Model[1])
coef(A$Model[[2]])
devtools::load_all()
coef(A)
coef(A)
fit
A
class(A)
coef(A)
