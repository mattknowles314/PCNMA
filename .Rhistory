ggplot(results_df, aes(y = fct_rev(TrtDiff))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3)
ggplot(results_df, aes(y = as.factor(TrtDiff))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3)
results_df <- data.frame(
Treatment = c("FOL", "GEMAXI", "PEFG",
"GEMIRI", "GEMCIS", "GEMCAP"),
TrtDiff = results$mean[1:6],
TrtDiffLCL = results$`2.5%`[1:6],
TrtDiffUCL = results$`97.5%`[1:6]
)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL))
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
results_df <- data.frame(
Treatment = c("d[FOL]", "d[GEMAXI]", "d[PEFG]",
"d[GEMIRI]", "d[GEMCIS]", "d[GEMCAP]"),
TrtDiff = results$mean[1:6],
TrtDiffLCL = results$`2.5%`[1:6],
TrtDiffUCL = results$`97.5%`[1:6]
)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL))
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(x = 0)) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0)) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
?geom_vline
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0), linetype = "dashed", linewidth = 0.5) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0), linetype = "dashed", alpha = 0.5) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Forest.png",
width = 12, heigh = 12, units = "in")
model <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = 50000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Traceplot.png",
width = 12, height = 12, units = "in")
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Posterior.png",
width = 12, height = 12, units = "in")
results <- as.data.frame((summary(model))[["summary"]])
results_df <- data.frame(
Treatment = c("d[FOL]", "d[GEMAXI]", "d[PEFG]",
"d[GEMIRI]", "d[GEMCIS]", "d[GEMCAP]"),
TrtDiff = results$mean[1:6],
TrtDiffLCL = results$`2.5%`[1:6],
TrtDiffUCL = results$`97.5%`[1:6]
)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0), linetype = "dashed", alpha = 0.5) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Forest.png",
width = 12, heigh = 12, units = "in")
ls
View(results_df)
print(model)
library(openxlsx)
library(dplyr)
library(devtools)
library(PCNMA)
library(multinma)
library(forestploter)
library(ggplot2)
library(rstan)
lnorm_coeffs <- readRDS("lnorm_coeffs.Rds")
stan_data <- list(
N = 6,
mean_gem = (lnorm_coeffs |> filter(term == "mean", Treatment == "GEM"))[["Estimate"]],
mean_comp = (lnorm_coeffs |> filter(term == "mean", Treatment != "GEM"))[["Estimate"]],
sd_gem = (lnorm_coeffs |> filter(term == "sd", Treatment == "GEM"))[["Estimate"]],
sd_comp = (lnorm_coeffs |> filter(term == "sd", Treatment != "GEM"))[["Estimate"]]
)
model <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = 15000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
plot(model$tau)
model$tau
model[["tau"]]
library(shinystan)
install.packages("shinystan")
renv::install("shinystan")
renv::install("gtools")
model <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = 15000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
gc()
model <- stan(
file = "src/lognormalnma.stan",
data = stan_data,
chains = 4,
iter = 50000,
cores = 5,
refresh = 0
)
traceplot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Traceplot.png",
width = 12, height = 12, units = "in")
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Posterior.png",
width = 12, height = 12, units = "in")
results <- as.data.frame((summary(model))[["summary"]])
results_df <- data.frame(
Treatment = c("d[FOL]", "d[GEMAXI]", "d[PEFG]",
"d[GEMIRI]", "d[GEMCIS]", "d[GEMCAP]"),
TrtDiff = results$mean[1:6],
TrtDiffLCL = results$`2.5%`[1:6],
TrtDiffUCL = results$`97.5%`[1:6]
)
ggplot(results_df, aes(y = as.factor(Treatment))) +
geom_point(aes(x = TrtDiff), shape = 15, size = 3) +
geom_linerange(aes(xmin = TrtDiffLCL,
xmax = TrtDiffUCL)) +
geom_vline(aes(xintercept = 0), linetype = "dashed", alpha = 0.5) +
labs(x = "Estimated Treatment Effects",
y = "Comparator")
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Forest.png",
width = 12, heigh = 12, units = "in")
View(lnorm_coeffs)
# Load PFS Data
PFS_IPD <- read.xlsx("Data/IPD/IPD_PFS_Master.xlsx") |>
mutate(status = ifelse(censored == TRUE, 0, 1)) |>
rename(Study = study)
View(PFS_IPD)
library(multinma)
?set_ipd
test <- set_ipd(
data = PFS_IPD,
study = Study,
trt = treatment,
E = time,
trt_ref = "GEM"
)
test <- set_ipd(
data = PFS_IPD,
study = Study,
trt = treatment,
E = time,
r = censored,
trt_ref = "GEM"
)
test <- set_ipd(
data = PFS_IPD,
study = Study,
trt = treatment,
y = time,
trt_ref = "GEM"
)
plot(test)
?set_agd_surv
test2 <- set_agd_surv(
data = PFS_IPD,
study = Study,
trt = treatment,
Surv = time,
trt_ref = "GEM"
)
test2 <- set_agd_surv(
data = PFS_IPD,
study = Study,
trt = treatment,
Surv = Surv(time, censored),
trt_ref = "GEM"
)
plot(test2)
class(test2)
?nma
nma(test2,
trt_effects = "random")
nma(test2,
trt_effects = "random",
likelihood = "lognormal",
link = "log"
)
test <- set_agd_surv(
data = PFS_IPD,
study = Study,
trt = treatment,
Surv = Surv(time, censored),
trt_ref = "GEM"
)
nma(test,
trt_effects = "random",
likelihood = "lognormal",
link = "log"
)
model <- nma(test,
trt_effects = "random",
likelihood = "lognormal",
link = "log"
)
rlang::last_trace()
test
test <- set_agd_surv(
data = PFS_IPD,
study = Study,
trt = treatment,
Surv = Surv(time, censored),
trt_ref = "GEM"
)
test
View(test)
test[["agd_arm"]]
set_agd_surv()
?set_agd_surv
test$agd_arm
View(test)
View(test[["agd_arm"]])
View((test[["agd_arm"]])[[4]][[1]])
View((test[["agd_arm"]])[[5]][[1]])
model <- nma(test,
trt_effects = "random",
likelihood = "lognormal",
link = "log"
)
model <- nma(test,
likelihood = "lognormal",
link = "log"
)
devtools::load_all()
net <- gen_network(PFS_IPD, ref = "GEM")
devtools::load_all()
net <- gen_network(PFS_IPD, ref = "GEM")
library(PCNMA)
# Load PFS Data
PFS_IPD <- read.xlsx("Data/IPD/IPD_PFS_Master.xlsx") |>
mutate(status = ifelse(censored == TRUE, 0, 1)) |>
rename(Study = study)
net <- gen_network(PFS_IPD, ref = "GEM")
fit_model <- function(network, L, lnk){
out <- multinma::nma(
test,
likelihood = L,
link = lnk
)
}
model <- fit_model(net, "lognormal", "log")
plot(model)
summary(model)
class(model)
View(model)
library(multinma)
plot(model)
summary(model)
results <- model$stanfit
library(stan)
library(rstan)
plot(results)
model[["stanfit"]]
traceplot(results, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]", "tau"))
traceplot(results, pars = c("delta[FOL]","delta[GEMXI]","delta[GAMCAP]",
"delta[GEMCIS]"))
traceplot(results, pars = c("d[FOL]","d[GEMXI]","d[GAMCAP]","d[GEMCIS]"))
# Load PFS Data
PFS_IPD <- read.xlsx("Data/IPD/IPD_PFS_Master.xlsx") |>
mutate(status = ifelse(censored == TRUE, 0, 1)) |>
rename(Study = study)
library(openxlsx)
library(dplyr)
library(devtools)
library(PCNMA)
library(multinma)
library(forestploter)
library(ggplot2)
# Load PFS Data
PFS_IPD <- read.xlsx("Data/IPD/IPD_PFS_Master.xlsx") |>
mutate(status = ifelse(censored == TRUE, 0, 1)) |>
rename(Study = study)
PFS_IPD
test <- set_agd_surv(
data = PFS_IPD,
study = Study,
trt = treatment,
Surv = Surv(time, censored),
trt_ref = "GEM"
)
View(test)
max(PFS_IPD$time)
View(PFS_IPD)
studyData <- filter(Study == "Conroy")
studyData <- PFS_IPD |>  filter(Study == "Conroy")
Surv(studyData$time, studyData$censored)
summary(Surv(studyData$time, studyData$censored))
test[["agd_arm"]][[".Surv"]]
?set_agd_surv
test2 <- set_ipd(
data = PFS_IPD,
study = Study,
trt = treatment,
Surv = Surv(time, censored),
trt_ref = "GEM"
)
plot(test2)
model <- nma(test2,
likelihood = "lognormal",
link = "log"
)
plot(model)
View(model)
View(test2)
class(model)
View(model)
model[["stanfit"]]
results <- model[["stanfit"]]
plot(results)
traceplot(results, pars = c("d[FOL]","d[GEMXI]","d[GAMCAP]","d[GEMCIS]",
"d[GEMIRI]", "d[PEFG]"))
library(rstan)
plot(results)
traceplot(results, pars = c("d[FOL]","d[GEMXI]","d[GAMCAP]","d[GEMCIS]",
"d[GEMIRI]", "d[PEFG]"))
traceplot(results, pars = c("d[FOL]","d[GEMAXI]","d[GEMCAP]","d[GEMCIS]",
"d[GEMIRI]", "d[PEFG]"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Traceplot.png",
width = 12, height = 12, units = "in")
plot(model, pars = c("delta[1]","delta[2]","delta[3]",
"delta[4]","delta[5]","delta[6]"))
plot(model, pars = c("d[FOL]","d[GEMAXI]","d[GEMCAP]","d[GEMCIS]",
"d[GEMIRI]", "d[PEFG]"))
results <- as.data.frame((summary(model))[["summary"]])
rstan::stan_plot(model)
rstan::stan_plot(results)
plot(model, pars = c("d[FOL]","d[GEMAXI]","d[GEMCAP]","d[GEMCIS]",
"d[GEMIRI]", "d[PEFG]"))
ggsave(filename = "../MScThesis/Results/NMA/Parametric/PFS_Posterior.png",
width = 12, height = 12, units = "in")
devtools::load_all()
PCNMA::gen_network_data()
PCNMA::gen_network_data
devtools::load_all()
network <- gen_network(PFS_IPD, "GEM")
identical(test2, network)
model <- nma(test2,
likelihood = c("lognormal", "weibull"),
link = "log"
)
renv::install("googledrive")
library(googledrive)
googledrive::drive_user()
drive_auth_configure()
dir.exists("https://drive.google.com/drive/u/3/folders/13hBjM6ySj39PgrkoWmFZ1ghkykZy4kFk")
?googledrive
?`googledrive-configuration`
drive_find()
?drive_upload
drive_upload("../MScThesis/Results/NMA/Parametric/PFS_Forest.png", path = "PFS")
drive_upload("../MScThesis/Results/NMA/Parametric/PFS_Forest.png", path = as_id("PFS"))
drive_upload("../MScThesis/Results/NMA/Parametric/PFS_Forest.png", path = as_id("1tNYH64aGYr-Sv-LgDeBdYPNpDHBynfkT"))
?nma
model_loglik <- fit_model(
network,
"lognormal",
"log",
stan_settings
)
fit_model <- function(network, L, lnk, ...){
out <- multinma::nma(
network,
likelihood = L,
link = lnk,
...
)
}
model_loglik <- fit_model(
network,
"lognormal",
"log",
stan_settings
)
model_loglik <- fit_model(
network,
"lognormal",
"log",
iter = 5000
)
fit_model <- function(network, L, lnk, ...){
out <- multinma::nma(
network,
likelihood = L,
link = lnk,
...
)
out
}
?set_ipd
devtools::load_all()
devtools::document()
roxygen2::roxygenise()
?remotes
??remotes
library(remotes)
?remotes
?install_github
library(PCNMA)
remove.packages("PCNMA", lib="~/.cache/R/renv/library/PCNMA-b873f6f1/R-4.2/x86_64-pc-linux-gnu")
library(devtools)
library(PCNMA)
devtools::install_github("https://github.com/mattknowles314/PCNMA")
library(PCNMA)
# Load PFS Data
PFS_IPD <- read.xlsx("Data/IPD/IPD_PFS_Master.xlsx") |>
mutate(status = ifelse(censored == TRUE, 0, 1)) |>
rename(Study = study)
# Setup Network
network <- gen_network(PFS_IPD, "GEM")
# Stan settings
iterations = 30000
seed = 3
# Perform NMA using multinma::nma
model_loglik <- fit_model(
network,
"lognormal",
"log",
iter = iterations,
seed
)
model_weib <- fit_model(
network,
"weibull-aft",
"log",
iter = iterations,
seed
)
devtools::load_all()
# Perform NMA using multinma::nma
model_loglik <- fit_model(
network,
"lognormal",
"log",
iter = iterations,
seed
)
# Perform NMA using multinma::nma
model_loglik <- fit_model(
network,
"lognormal",
"log",
iter = iterations,
seed
)
