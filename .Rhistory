source("R/networkplot.R")
data <- read_def("Data/DE.xlsx")
ref <- "GEM"
df <- gen_network_data(data, ref)
View(data)
?read.xlsx
read_def <- function(path){
openxlsx::read.xlsx(path, sheet = "DEF", startRow = 2)
}
source("R/networkplot.R")
library(dplyr)
library(tidyr)
library(ggraph)
library(igraph)
source("R/utils.R")
source("R/network_functions.R")
data <- read_def("Data/DE.xlsx")
ref <- "GEM"
df <- gen_network_data(data, ref)
View(data)
openxlsx::read.xlsx(path, sheet = "DEF", startRow = 1)
read_def <- function(path){
openxlsx::read.xlsx(path, sheet = "DEF", startRow = 1)
}
data <- read_def("Data/DE.xlsx")
View(data)
read_def <- function(path){
openxlsx::read.xlsx(path, sheet = "DEF", startRow = 3)
}
data <- read_def("Data/DE.xlsx")
View(data)
read_def <- function(path){
openxlsx::read.xlsx(path, sheet = "DEF", startRow = 2)
}
data <- read_def("Data/DE.xlsx")
View(data)
ref <- "GEM"
df <- gen_network_data(data, ref)
net <- gen_network(df, ref)
plot(net)
gen_network_data <- function(data, ref){
data %>% select(Study, Total.Patients, Treatment.1, Treatment.2, `N.(Trt1)`, `N.(Trt2)`, `Median.OS.(Trt.1)`, `Median.OS.(Trt.2)`) %>%
rename(N = Total.Patients) %>%
pivot_longer(cols = 3:4, values_to = "Treatment") %>%
mutate(r = ifelse(Treatment == ref, `N.(Trt1)`, `N.(Trt2)`)) %>%
select(-c(name, `N.(Trt1)`, `N.(Trt2)`, `Median.OS.(Trt.1)`, `Median.OS.(Trt.2)`))
}
data <- read_def("Data/DE.xlsx")
ref <- "GEM"
df <- gen_network_data(data, ref)
gen_network_data <- function(data, ref){
data %>% select(Study, Total.Patients, Treatment.1, Treatment.2, `N.(Trt1)`, `N.(Trt2)`, `Median.OS.(Trt.1)`, `Median.OS.(Trt.2)`) %>%
rename(N = Total.Patients) %>%
pivot_longer(cols = 3:4, values_to = "Treatment") %>%
mutate(r = ifelse(Treatment == ref, `N.(Trt1)`, `N.(Trt2)`)) %>%
select(-c(name, `N.(Trt1)`, `N.(Trt2)`))
}
df <- gen_network_data(data, ref)
gen_network_data <- function(data, ref){
data %>% select(Study, Total.Patients, Treatment.1, Treatment.2, `N.(Trt1)`, `N.(Trt2)`, Reported.OS, Reported.PFS) %>%
rename(N = Total.Patients) %>%
pivot_longer(cols = 3:4, values_to = "Treatment") %>%
mutate(r = ifelse(Treatment == ref, `N.(Trt1)`, `N.(Trt2)`)) %>%
select(-c(name, `N.(Trt1)`, `N.(Trt2)`))
}
df <- gen_network_data(data, ref)
df <- gen_network_data(data, ref)
View(df)
OS_network <- df %>%
filter(Reported.OS == 1) %>%
gen_network(ref)
plot(OS_network)
gen_network_data <- function(data, ref){
data %>% select(Study, Year, Total.Patients, Treatment.1, Treatment.2, `N.(Trt1)`, `N.(Trt2)`, Reported.OS, Reported.PFS) %>%
rename(N = Total.Patients) %>%
mutate(Study = paste0(Study, ", ", Year)) %>%
pivot_longer(cols = 3:4, values_to = "Treatment") %>%
mutate(r = ifelse(Treatment == ref, `N.(Trt1)`, `N.(Trt2)`)) %>%
select(-c(name, `N.(Trt1)`, `N.(Trt2)`))
}
df <- gen_network_data(data, ref)
gen_network_data <- function(data, ref){
data %>% select(Study, Year, Total.Patients, Treatment.1, Treatment.2, `N.(Trt1)`, `N.(Trt2)`, Reported.OS, Reported.PFS) %>%
rename(N = Total.Patients) %>%
mutate(Study = paste0(Study, ", ", Year))}
df <- gen_network_data(data, ref)
View(df)
gen_network_data <- function(data, ref){
data %>% select(Study, Year, Total.Patients, Treatment.1, Treatment.2, `N.(Trt1)`, `N.(Trt2)`, Reported.OS, Reported.PFS) %>%
rename(N = Total.Patients) %>%
mutate(Study = paste0(Study, ", ", Year)) %>%
pivot_longer(cols = 4:5, values_to = "Treatment") %>%
mutate(r = ifelse(Treatment == ref, `N.(Trt1)`, `N.(Trt2)`)) %>%
select(-c(name, `N.(Trt1)`, `N.(Trt2)`))
}
df <- gen_network_data(data, ref)
plot(df)
OS_network <- df %>%
filter(Reported.OS == 1) %>%
gen_network(ref)
OS_network <- df %>%
filter(Reported.OS == 1) %>%
gen_network(ref) %>%
plot()
OS_network <- df %>%
filter(Reported.OS == 1) %>%
gen_network(ref)
plot(OS_network)
PFS_network <- df %>%
filter(Reported.PFS == 1) %>%
gen_network(ref)
plot(PFS_network)
plot_network <- function(network, ...){
ggraph(as.igraph(network), layout = "kk") +
geom_edge_fan(aes(edge_width = .data$.nstudy)) +
scale_edge_width_continuous("Number of Studies") +
geom_node_point(aes()) +
geom_node_text(aes(label = .data$name))
}
plot_network(OS_network)
plot(OS_network)
plot(PFS_network)
plot(PFS_network)
OS_network
?multinma::nma
df
View(df)
length(unique(df))
length(unique(df$Study))
PFS_network
OS_network
plot(OS_network)
plot(PFS_network)
View(df)
View(df)
library(dplyr)
library(tidyr)
library(ggraph)
library(igraph)
source("R/utils.R")
source("R/network_functions.R")
data <- read_def("Data/DE.xlsx")
ref <- "GEM"
df <- gen_network_data(data, ref)
OS_network <- df %>%
filter(Reported.OS == 1) %>%
gen_network(ref)
PFS_network <- df %>%
filter(Reported.PFS == 1) %>%
gen_network(ref)
plot(OS_network)
plot(PFS_network)
library(ggplot2)
plot(OS_network) %>% ggsave("/home/matthew/Documents/MScThesis/figures/PC_OS_Network.png")
plot(OS_network)
plot(PFS_network)
library(multinma)
?plot.nma_data
plot(OS_network, layout = "star")
plot(PFS_network, layout = "star")
plot(OS_network, layout = "star")
plot(PFS_network, layout = "star")
plot(OS_network, layout = "star")
plot(OS_network, layout = "star")
plot(PFS_network, layout = "star")
plot(OS_network, layout = "star")
plot(PFS_network, layout = "star")
plot(OS_network, layout = "star")
plot(PFS_network, layout = "star")
OS_network <- df %>%
filter(Reported.OS == 1) %>%
gen_network(ref)
PFS_network <- df %>%
filter(Reported.PFS == 1) %>%
gen_network(ref)
plot(OS_network, layout = "star")
plot(PFS_network, layout = "star")
plot(OS_network, layout = "star")
plot(PFS_network, layout = "star")
plot(OS_network, layout = "star")
plot(PFS_network, layout = "star")
?tidyr::nest
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = lapply(
Distributions,
function(.x) {
flexsurvreg(
Surv(time, status) ~ 1,
dist = .x,
data = data)
}
))
}
B <- fit_distribution()
system("python3 src/IPD_handler.py")
for (i in list.files("Data/IPD/", pattern = ".csv")) {
assign(
stringr::str_remove(i, ".csv"),
read.csv(paste0("Data/IPD/",i)) %>%
mutate(status = ifelse(censored == TRUE, 0, 1))
)
}
View(IPD_GemOS_Colluci)
models <- fit_distribution(dists, IPD_GemOS_Colluci)
dists <- c("exponential",
"gengamma",
"weibull",
"lognormal",
"gamma",
"gengamma")
models <- fit_distribution(dists, IPD_GemOS_Colluci)
library(flexsurv)
dists <- c("exponential",
"gengamma",
"weibull",
"lognormal",
"gamma",
"gengamma")
models <- fit_distribution(dists, IPD_GemOS_Colluci)
View(models)
View(models[[2]][[1]])
library(survminer)
plot(fit_distribution("weibull", IPD_GemOS_Colluci))
.fit_distribution <- function(distribution, data){
fit <- flexsurvreg(
Surv(time, status) ~ 1,
dist = distribution,
data = data
)
}
.fit_distribution("weibull", IPD_GemOS_Colluci)
A <- .fit_distribution("weibull", IPD_GemOS_Colluci)
A
class(A)
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map(
Distributions,
.fit_distribution
))
}
A <- fit_distribution("weibull", IPD_GemOS_Colluci)
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map2(
Distributions,
data,
.fit_distribution
))
}
A <- fit_distribution("weibull", IPD_GemOS_Colluci)
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map(
Distributions,
.fit_distribution
data
))
}
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map(
Distributions,
.fit_distribution
data
))
}
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map(
Distributions,
.fit_distribution
data
))
}
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map(
Distributions,
.fit_distribution,
data
))
}
A <- fit_distribution("weibull", IPD_GemOS_Colluci)
A
View(A)
class(A$Model)
A <- fit_distribution(c("weibull", "gamma"), IPD_GemOS_Colluci)
A
View(A)
A$Model[1]
renv::status
renv::status()
renv::snapshot()
library(dplyr)
renv::snapshot()
library(dplyr)
renv::snapshot()
library(dplyr)
renv::snapshot()
library(dplyr)
renv::snapshot()
View(models[[2]][[1]])
models[[2]][[1]][["AIC"]]
B
models <- fit_distribution(dists, IPD_GemOS_Colluci)
library(flexsurv)
library(dplyr)
dists <- c("exponential",
"gengamma",
"weibull",
"lognormal",
"gamma",
"gengamma")
models <- fit_distribution(dists, IPD_GemOS_Colluci)
models$Model["AIC"]
models$Model$AIC
View(models[[2]][[1]])
models[[2]][[1]][["AIC"]]
models$Model[["AIC"]]
models$Model[['AIC']]
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map(
Distributions,
.fit_distribution,
data
)) %>% mutate(
AIC = .data[["AIC"]]
)
}
models <- fit_distribution(dists, IPD_GemOS_Colluci)
models <- fit_distribution(dists, IPD_GemOS_Colluci)
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map(
Distributions,
.fit_distribution,
data
)) %>% mutate(
AIC = .x$Model[["AIC"]]
)
}
models <- fit_distribution(dists, IPD_GemOS_Colluci)
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map(
Distributions,
.fit_distribution,
data
))
df$AIC <- Model[["AIC"]]
}
models <- fit_distribution(dists, IPD_GemOS_Colluci)
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map(
Distributions,
.fit_distribution,
data
))
df$AIC <- df$Model[["AIC"]]
}
models <- fit_distribution(dists, IPD_GemOS_Colluci)
models
fit_distribution <- function(distributions, data){
df <- data.frame(Distributions = distributions)
df <- df %>%
mutate(Model = purrr::map(
Distributions,
.fit_distribution,
data
))
df$AIC <- df$Model[["AIC"]]
df
}
models <- fit_distribution(dists, IPD_GemOS_Colluci)
View(df)
View(models)
models <- fit_distribution(dists, IPD_GemOS_Colluci)
models
View(models)
models[[2]][[1]][["opt"]]
models[[2]][[1]][["data"]][["mml"]][["rate"]]
models[[2]][[1]][["data"]][["m"]]
models[[2]][[1]][["res"]]
